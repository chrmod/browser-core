#!/bin/bash

# This hook prevents push of commits where the log message doesn't conform to
# style guide format: "EX-XXXX: Description".
#
# Called by "git push" after it has checked the remote status, but before
# anything has been pushed.
# If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

while read local_ref local_sha remote_ref remote_sha
do
  if [[ `git rev-parse master` == $local_sha ]]; then
    continue
  fi

  if [ "$local_sha" = $z40 ]
  then
    # Handle delete
    :
  else
    if [ "$remote_sha" == $z40 ]; then
      # New branch, examine all commits after diverging from master.
      master_merge_base=`git merge-base master $local_sha`
      range="$master_merge_base..$local_sha"
    else
      # This may fail if "$remote_sha" equals $z40
      remote_merge_base=`git merge-base $remote_sha $local_sha`
      if [ "$remote_merge_base" == "$remote_sha" ]; then
        # Update to existing branch, examine new commits.
        range="$remote_merge_base..$local_sha"
      else
        # Rewriting remote branch. Check commits after master.
        master_merge_base=`git merge-base master $local_sha`
        range="$master_merge_base..$local_sha"
      fi
    fi

    # Check commit messages
    has_errors=0
    while read commit_id
    do
      commit_message=`git log -n1 --pretty=%s $commit_id`
      ticked_id_match=`echo $commit_message | egrep '^EX-\d+:\s\w+'`
      if [ -z "$ticked_id_match" ]; then
        has_errors=1
        echo >&2 "Commit message of $commit_id contains no ticket ID:"
        echo >&2 $commit_message
        echo >&2 "--"
      fi
      long_line=`echo $commit_message | egrep -m 1 '.{81}'`
      if ! [ -z $long_line ]; then
        has_errors=1
        echo >&2 "Commit message of $commit_id contains lines exceeding 80 symbols:"
        echo >&2 $long_line
        echo >&2 "                                                                                ^"
        echo >&2 "--"
      fi
    done < <(git rev-list --no-merges "$range")
    if [ $has_errors != 0 ]; then
      echo >&2 "Some of your commit messages do not conform to style guides."
      echo "Fix messages and try again."
      echo "Checked commits are:"
      git rev-list --no-merges "$range"
      exit 1
    fi
  fi
done

exit 0
